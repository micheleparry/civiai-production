# Generated by Django 5.2.4 on 2025-07-17 04:55

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PermitType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of permit type', max_length=100)),
                ('code', models.CharField(help_text='Short code for permit type', max_length=20, unique=True)),
                ('description', models.TextField(help_text='Description of when this permit is needed')),
                ('base_fee', models.DecimalField(decimal_places=2, help_text='Base application fee', max_digits=8)),
                ('per_square_foot_fee', models.DecimalField(decimal_places=4, default=0, help_text='Additional fee per sq ft', max_digits=6)),
                ('per_unit_fee', models.DecimalField(decimal_places=2, default=0, help_text='Fee per unit (for multi-unit projects)', max_digits=8)),
                ('requires_public_notice', models.BooleanField(default=False, help_text='Requires public notification')),
                ('requires_public_hearing', models.BooleanField(default=False, help_text='Requires public hearing')),
                ('standard_review_days', models.IntegerField(default=14, help_text='Standard review time in business days')),
                ('can_auto_approve', models.BooleanField(default=False, help_text='Can be automatically approved if compliant')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(help_text='Street address', max_length=255)),
                ('tax_lot_number', models.CharField(help_text='Tax lot number', max_length=50, unique=True)),
                ('plat_number', models.CharField(blank=True, help_text='Plat number if applicable', max_length=50, null=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('acres', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('zoning', models.CharField(choices=[('R1', 'R-1 Low Density Residential'), ('R2', 'R-2 Medium Density Residential'), ('R3', 'R-3 High Density Residential'), ('CG', 'C-G General Commercial'), ('I', 'Industrial'), ('A', 'Agriculture'), ('PF', 'Public Facilities')], help_text='Current zoning designation', max_length=10)),
                ('floodplain_overlay', models.BooleanField(default=False, help_text='Property is in FEMA floodplain')),
                ('riparian_overlay', models.BooleanField(default=False, help_text='Property has riparian buffer requirements')),
                ('easements', models.TextField(blank=True, help_text='Description of known easements')),
                ('rights_of_way', models.TextField(blank=True, help_text='Description of rights of way')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Properties',
                'ordering': ['address'],
            },
        ),
        migrations.CreateModel(
            name='PermitApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('application_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('applicant_name', models.CharField(max_length=200)),
                ('applicant_email', models.EmailField(max_length=254)),
                ('applicant_phone', models.CharField(max_length=20)),
                ('project_description', models.TextField(help_text='Description of proposed work')),
                ('project_value', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated project value', max_digits=12, null=True)),
                ('square_footage', models.DecimalField(blank=True, decimal_places=2, help_text='Square footage of project', max_digits=10, null=True)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft - In Progress'), ('SUBMITTED', 'Submitted - Under Review'), ('INCOMPLETE', 'Incomplete - Additional Information Required'), ('UNDER_REVIEW', 'Under Review'), ('APPROVED', 'Approved'), ('APPROVED_WITH_CONDITIONS', 'Approved with Conditions'), ('DENIED', 'Denied'), ('WITHDRAWN', 'Withdrawn')], default='DRAFT', max_length=25)),
                ('calculated_fee', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('fee_paid', models.BooleanField(default=False)),
                ('compliance_check_passed', models.BooleanField(default=False)),
                ('compliance_issues', models.JSONField(blank=True, default=list, help_text='List of compliance issues found by AI')),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('review_completed_at', models.DateTimeField(blank=True, null=True)),
                ('review_notes', models.TextField(blank=True, help_text='Staff review notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_applications', to=settings.AUTH_USER_MODEL)),
                ('permit_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='permitting.permittype')),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applications', to='permitting.property')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ApplicationDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(choices=[('SITE_PLAN', 'Site Plan'), ('FLOOR_PLAN', 'Floor Plan'), ('ELEVATION', 'Elevation Drawing'), ('SURVEY', 'Property Survey'), ('PHOTOS', 'Site Photos'), ('OTHER', 'Other')], max_length=20)),
                ('file', models.FileField(upload_to='application_documents/')),
                ('filename', models.CharField(max_length=255)),
                ('file_size', models.IntegerField(help_text='File size in bytes')),
                ('ai_processed', models.BooleanField(default=False)),
                ('ai_extracted_data', models.JSONField(blank=True, default=dict, help_text='Data extracted by AI from document')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='permitting.permitapplication')),
            ],
        ),
        migrations.CreateModel(
            name='ZoningRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zoning_district', models.CharField(choices=[('R1', 'R-1 Low Density Residential'), ('R2', 'R-2 Medium Density Residential'), ('R3', 'R-3 High Density Residential'), ('CG', 'C-G General Commercial'), ('I', 'Industrial'), ('A', 'Agriculture'), ('PF', 'Public Facilities')], max_length=10)),
                ('rule_type', models.CharField(help_text="Type of rule (e.g., 'setback', 'height_limit', 'lot_coverage')", max_length=50)),
                ('rule_description', models.CharField(help_text='Human-readable description', max_length=200)),
                ('rule_parameters', models.JSONField(help_text='Rule parameters in JSON format')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'unique_together': {('zoning_district', 'rule_type')},
            },
        ),
        migrations.CreateModel(
            name='ComplianceCheck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.CharField(choices=[('PASS', 'Compliant'), ('FAIL', 'Non-Compliant'), ('WARNING', 'Warning - Needs Review'), ('NOT_APPLICABLE', 'Not Applicable')], max_length=15)),
                ('details', models.TextField(help_text='Detailed explanation of the check result')),
                ('suggested_action', models.TextField(blank=True, help_text='Suggested action to resolve issues')),
                ('checked_at', models.DateTimeField(auto_now_add=True)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='compliance_checks', to='permitting.permitapplication')),
                ('rule_checked', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='permitting.zoningrule')),
            ],
        ),
    ]
